!function(){"use strict";function e(e,t,r,l,o){e.html5Mode(!0),r.otherwise("/"),l.strictMode(!1),t.state("overview",{url:"/",templateUrl:"overview/index.html",controller:"Overview.IndexController",controllerAs:"vm",data:{selectedTab:0}}).state("content",{url:"/content",templateUrl:"content/main.html",controller:"Content.IndexController",data:{selectedTab:1}}).state("users",{url:"/users",templateUrl:"users/index.html",controller:"Users.IndexController",controllerAs:"vm",data:{selectedTab:1}}).state("users.add",{url:"/users/add",templateUrl:"users/add-edit.html",controller:"Users.AddEditController",controllerAs:"vm"}).state("users.edit",{url:"/users/edit/:_id",templateUrl:"users/add-edit.html",controller:"Users.AddEditController",controllerAs:"vm"})}function t(e,t){e.apiUrl="http://localhost:3001",t.get("/token").then(function(e){t.defaults.headers.common.Authorization="Bearer "+e.data})}angular.module("app",["ngMaterial","ngAnimate","ngMessages","ui.router","ngFileUpload","wj"]).config(e).run(t),e.$inject=["$locationProvider","$stateProvider","$urlRouterProvider","$urlMatcherFactoryProvider","$mdThemingProvider"],t.$inject=["$rootScope","$http"]}();
!function(){"use strict";function e(e){var t=this;t.selectedTab=0,t.tabs=[{name:"Overview",path:"/"},{name:"Users",path:"/users"}],e.$on("$stateChangeSuccess",function(e,a,s,n,c){t.selectedTab=a.data.selectedTab})}angular.module("app").controller("TabsController",e),e.$inject=["$rootScope"]}();
!function(){"use strict";function n(){}angular.module("app").controller("Overview.IndexController",n)}();
!function(){"use strict";function e(e,s,r,i,t,n,o){function u(){r._id&&(d.title="Edit User",t.GetById(r._id).then(function(e){$.extend(!0,d.user,e)}),e.$on("users",function(e,s){var r=s.item&&s.item._id||s._id;r===d.user._id&&r!==d.updatedId&&n.Error("This user was just "+s.action+" by another user")})),e.$watch("files",function(){a(e.files)}),e.$on("$destroy",function(){if(!d.saved&&d.user.files){var e=_.filter(d.user.files,function(e){return!e.saved});_.each(e,function(e){o.Delete(e)})}})}function l(r){function i(){t.Create(r).then(function(){d.saved=!0,s.go("users"),n.Success("User created")})["catch"](function(e){n.Error(e)})}function u(){d.updatedId=r._id,t.Update(r).then(function(){d.saved=!0,d.filesToDelete&&_.each(d.filesToDelete,function(e){o.Delete(e)}),s.go("users"),n.Success("User updated")})["catch"](function(e){n.Error(e)})}e.userForm.$invalid||(r._id?u():i())}function a(s){if(s&&s.length){d.user.files=d.user.files||[],d.failedUploads=d.failedUploads||[];for(var r=0;r<s.length;r++){var i=s[r];i.progress=0;var t=_.findWhere(d.user.files,{name:i.name});t&&f(t),d.user.files.push(_.clone(i)),o.Upload({url:e.apiUrl+"/uploads",file:i}).progress(function(e){var s=_.findWhere(d.user.files,{name:e.config.file.name});delete s.path,s.progress=parseInt(100*e.loaded/e.total)}).success(function(e,s,r,i){var t=_.findWhere(d.user.files,{name:i.file.name});delete t.progress,t.path="/uploads/"+e}).error(function(e,s,r,i){var t=_.findWhere(d.user.files,{name:i.file.name});d.user.files=_.without(d.user.files,_.findWhere(d.user.files,t)),t.error=s+" "+e,d.failedUploads.push(t)})}}}function f(e){d.user.files=_.without(d.user.files,_.findWhere(d.user.files,{name:e.name})),e.saved?(d.filesToDelete=d.filesToDelete||[],d.filesToDelete.push(e)):o.Delete(e)}var d=this;d.title="Add User",d.user={},d.saveUser=l,d.removeFile=f,u()}angular.module("app").controller("Users.AddEditController",e),e.$inject=["$scope","$state","$stateParams","$timeout","UserService","ToastService","FileService"]}();
!function(){"use strict";function e(e,n,t,i){function o(){var n=e.$watch("vm.flexgrid",function(){l.flexgrid&&(r(),e.$on("users",function(){r()}),n())})}function r(){n.GetAll().then(function(e){l.users=e,l.flexgrid.collectionView.refresh()})}function c(e){n.Delete(e).then(function(){r()})}var l=this;l.users=[],l.deleteUser=c,o()}angular.module("app").controller("Users.IndexController",e),e.$inject=["$scope","UserService","$timeout","$mdDialog"]}();
!function(){"use strict";function c(c){return c("cache")}angular.module("app").factory("Cache",c),c.$inject=["$cacheFactory"]}();
!function(){"use strict";function t(t,e,n,r,c){function i(u){return function(){var a=n.defer();return r.get(u)?a.resolve(r.get(u)):e.get(t.apiUrl+"/"+u).then(function(t){r.put(u,t.data),a.resolve(t.data)})["catch"](function(t){a.reject(t.data)}),c.On(u,function(e){i(u)().then(function(n){switch(e.action){case"created":n.push(e.item),r.put(u,n);break;case"updated":var c=_.findIndex(n,{_id:e.item._id});n[c]=e.item,r.put(u,n);break;case"deleted":n=_.without(n,_.findWhere(n,{_id:e._id})),r.put(u,n)}t.$broadcast(u,e)})}),a.promise}}function u(t){return function(e){return i(t)().then(function(t){return _.findWhere(t,{_id:e})})}}function a(r){return function(c){var i=n.defer();return e.post(t.apiUrl+"/"+r,c).then(function(t){i.resolve()})["catch"](function(t){i.reject(t.data)}),i.promise}}function o(r){return function(c){var i=n.defer();return e.put(t.apiUrl+"/"+r+"/"+c._id,c).then(function(t){i.resolve()})["catch"](function(t){i.reject(t.data)}),i.promise}}function f(r){return function(c){var i=n.defer();return e["delete"](t.apiUrl+"/"+r+"/"+c).then(function(t){i.resolve()})["catch"](function(t){i.reject(t.data)}),i.promise}}var d={};return d.GetAll=i,d.GetById=u,d.Create=a,d.Update=o,d.Delete=f,d}angular.module("app").factory("DataService",t),t.$inject=["$rootScope","$http","$q","Cache","Socket"]}();
!function(){"use strict";function e(e,t,o){function a(o){t["delete"](e.apiUrl+o.path)}var l={};return l.Upload=o.upload,l.Delete=a,l}angular.module("app").factory("FileService",e),e.$inject=["$rootScope","$http","Upload"]}();
!function(){"use strict";function n(n){function t(t,o){_.contains(n.socketListeners,t)||(n.socketListeners.push(t),c.on(t,function(){var t=arguments;n.$apply(function(){o.apply(c,t)})}))}function o(t,o,e){c.emit(t,o,function(){var t=arguments;n.$apply(function(){e&&e.apply(c,t)})})}var c=io.connect(n.apiUrl),e={};return e.On=t,e.Emit=o,n.socketListeners=[],e}angular.module("app").factory("Socket",n),n.$inject=["$rootScope"]}();
!function(){"use strict";function e(e){function t(t){return function(r){function o(){var t=this;t.message=r,t.close=e.hide}e.show({controller:o,controllerAs:"vm",templateUrl:"toast-"+t+"-template.html",hideDelay:6e3})}}var r={};return r.Success=t("success"),r.Error=t("error"),r}angular.module("app").factory("ToastService",e),e.$inject=["$mdToast"]}();
!function(){"use strict";function e(e){var t="users",r={};return r.GetAll=e.GetAll(t),r.GetById=e.GetById(t),r.Create=e.Create(t),r.Update=e.Update(t),r.Delete=e.Delete(t),r}angular.module("app").factory("UserService",e),e.$inject=["DataService"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImxheW91dC90YWJzLmNvbnRyb2xsZXIuanMiLCJvdmVydmlldy9pbmRleC5jb250cm9sbGVyLmpzIiwidXNlcnMvYWRkLWVkaXQuY29udHJvbGxlci5qcyIsInVzZXJzL2luZGV4LmNvbnRyb2xsZXIuanMiLCJhcHAtc2VydmljZXMvY2FjaGUuanMiLCJhcHAtc2VydmljZXMvZGF0YS5zZXJ2aWNlLmpzIiwiYXBwLXNlcnZpY2VzL2ZpbGUuc2VydmljZS5qcyIsImFwcC1zZXJ2aWNlcy9zb2NrZXQuanMiLCJhcHAtc2VydmljZXMvdG9hc3Quc2VydmljZS5qcyIsImFwcC1zZXJ2aWNlcy91c2VyLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiY29uZmlnIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyIiwiJG1kVGhlbWluZ1Byb3ZpZGVyIiwiaHRtbDVNb2RlIiwib3RoZXJ3aXNlIiwic3RyaWN0TW9kZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiZGF0YSIsInNlbGVjdGVkVGFiIiwicnVuIiwiJHJvb3RTY29wZSIsIiRodHRwIiwiYXBpVXJsIiwiZ2V0IiwidGhlbiIsInJlcyIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsImFuZ3VsYXIiLCJtb2R1bGUiLCIkaW5qZWN0IiwiQ29udHJvbGxlciIsInZtIiwidGhpcyIsInRhYnMiLCJuYW1lIiwicGF0aCIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsIiRzY29wZSIsIiRzdGF0ZSIsIiRzdGF0ZVBhcmFtcyIsIiR0aW1lb3V0IiwiVXNlclNlcnZpY2UiLCJUb2FzdFNlcnZpY2UiLCJGaWxlU2VydmljZSIsImluaXRDb250cm9sbGVyIiwiX2lkIiwidGl0bGUiLCJHZXRCeUlkIiwidXNlciIsIiQiLCJleHRlbmQiLCJpdGVtIiwidXBkYXRlZElkIiwiRXJyb3IiLCJhY3Rpb24iLCIkd2F0Y2giLCJ1cGxvYWRGaWxlcyIsImZpbGVzIiwic2F2ZWQiLCJ1bnNhdmVkRmlsZXMiLCJfIiwiZmlsdGVyIiwiZmlsZSIsImVhY2giLCJEZWxldGUiLCJzYXZlVXNlciIsImNyZWF0ZVVzZXIiLCJDcmVhdGUiLCJnbyIsIlN1Y2Nlc3MiLCJlcnJvciIsInVwZGF0ZVVzZXIiLCJVcGRhdGUiLCJmaWxlc1RvRGVsZXRlIiwidXNlckZvcm0iLCIkaW52YWxpZCIsImxlbmd0aCIsImZhaWxlZFVwbG9hZHMiLCJpIiwicHJvZ3Jlc3MiLCJleGlzdGluZ0ZpbGUiLCJmaW5kV2hlcmUiLCJyZW1vdmVGaWxlIiwicHVzaCIsImNsb25lIiwiVXBsb2FkIiwiZXZ0IiwicGFyc2VJbnQiLCJsb2FkZWQiLCJ0b3RhbCIsInN1Y2Nlc3MiLCJzdGF0dXMiLCJ3aXRob3V0IiwiJG1kRGlhbG9nIiwid2F0Y2giLCJmbGV4Z3JpZCIsImxvYWRVc2VycyIsIkdldEFsbCIsInVzZXJzIiwiY29sbGVjdGlvblZpZXciLCJyZWZyZXNoIiwiZGVsZXRlVXNlciIsIlNlcnZpY2UiLCIkY2FjaGVGYWN0b3J5IiwiZmFjdG9yeSIsIiRxIiwiQ2FjaGUiLCJTb2NrZXQiLCJ0eXBlIiwiZGVmZXJyZWQiLCJkZWZlciIsInJlc29sdmUiLCJwdXQiLCJyZWplY3QiLCJPbiIsIml0ZW1zIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCIkYnJvYWRjYXN0IiwicHJvbWlzZSIsInBvc3QiLCJzZXJ2aWNlIiwiZGVsZXRlRmlsZSIsInVwbG9hZCIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwiY29udGFpbnMiLCJzb2NrZXRMaXN0ZW5lcnMiLCJzb2NrZXQiLCJvbiIsImFyZ3MiLCJhcmd1bWVudHMiLCIkYXBwbHkiLCJhcHBseSIsIkVtaXQiLCJlbWl0IiwiaW8iLCJjb25uZWN0IiwiJG1kVG9hc3QiLCJGbGFzaCIsIm1l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QSxFQUFROUUsU0FBVyIsImZpbGUiOiJhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcsIFsnbmdNYXRlcmlhbCcsICduZ0FuaW1hdGUnLCAnbmdNZXNzYWdlcycsICd1aS5yb3V0ZXInLCAnbmdGaWxlVXBsb2FkJywgJ3dqJ10pXG4gICAgICAgIC5jb25maWcoY29uZmlnKVxuICAgICAgICAucnVuKHJ1bik7XG5cbiAgICBmdW5jdGlvbiBjb25maWcoJGxvY2F0aW9uUHJvdmlkZXIsICRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyLCAkbWRUaGVtaW5nUHJvdmlkZXIpIHtcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG5cclxuICAgICAgICAvLyBkZWZhdWx0IHJvdXRlXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XHJcblxyXG4gICAgICAgIC8vIG1ha2UgdHJhaWxpbmcgc2xhc2ggaW4gdXJscyBvcHRpb25hbFxyXG4gICAgICAgICR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyLnN0cmljdE1vZGUoZmFsc2UpXHJcblxyXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgIC5zdGF0ZSgnb3ZlcnZpZXcnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnb3ZlcnZpZXcvaW5kZXguaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnT3ZlcnZpZXcuSW5kZXhDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHsgc2VsZWN0ZWRUYWI6IDAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuc3RhdGUoJ2NvbnRlbnQnLCB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvY29udGVudCcsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbnRlbnQvbWFpbi5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb250ZW50LkluZGV4Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7IHNlbGVjdGVkVGFiOiAxIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnN0YXRlKCd1c2VycycsIHtcclxuICAgICAgICAgICAgICAgIHVybDogJy91c2VycycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3VzZXJzL2luZGV4Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1VzZXJzLkluZGV4Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7IHNlbGVjdGVkVGFiOiAxIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5zdGF0ZSgndXNlcnMuYWRkJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy91c2Vycy9hZGQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndXNlcnMvYWRkLWVkaXQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1VzZXJzLkFkZEVkaXRDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoJ3VzZXJzLmVkaXQnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL3VzZXJzL2VkaXQvOl9pZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd1c2Vycy9hZGQtZWRpdC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlcnMuQWRkRWRpdENvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICB9XG4gICAgY29uZmlnLiRpbmplY3QgPSBbXCIkbG9jYXRpb25Qcm92aWRlclwiLCBcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwiJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJcIiwgXCIkbWRUaGVtaW5nUHJvdmlkZXJcIl07XG5cbiAgICBmdW5jdGlvbiBydW4oJHJvb3RTY29wZSwgJGh0dHApIHtcbiAgICAgICAgJHJvb3RTY29wZS5hcGlVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAxJztcblxuICAgICAgICAkaHR0cC5nZXQoJy90b2tlbicpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9ICdCZWFyZXIgJyArIHJlcy5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcnVuLiRpbmplY3QgPSBbXCIkcm9vdFNjb3BlXCIsIFwiJGh0dHBcIl07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignVGFic0NvbnRyb2xsZXInLCBDb250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKCRyb290U2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICB2bS5zZWxlY3RlZFRhYiA9IDA7XHJcbiAgICAgICAgdm0udGFicyA9IFtcclxuICAgICAgICAgICAgeyBuYW1lOiAnT3ZlcnZpZXcnLCBwYXRoOiAnLycgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiAnVXNlcnMnLCBwYXRoOiAnL3VzZXJzJyB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcclxuICAgICAgICAgICAgdm0uc2VsZWN0ZWRUYWIgPSB0b1N0YXRlLmRhdGEuc2VsZWN0ZWRUYWI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkcm9vdFNjb3BlXCJdO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ092ZXJ2aWV3LkluZGV4Q29udHJvbGxlcicsIENvbnRyb2xsZXIpO1xuXG4gICAgZnVuY3Rpb24gQ29udHJvbGxlcigpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgIH1cblxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxuICAgICAgICAuY29udHJvbGxlcignVXNlcnMuQWRkRWRpdENvbnRyb2xsZXInLCBDb250cm9sbGVyKTtcblxuICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIoJHNjb3BlLCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHRpbWVvdXQsIFVzZXJTZXJ2aWNlLCBUb2FzdFNlcnZpY2UsIEZpbGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS50aXRsZSA9ICdBZGQgVXNlcic7XG4gICAgICAgIHZtLnVzZXIgPSB7fTtcbiAgICAgICAgdm0uc2F2ZVVzZXIgPSBzYXZlVXNlcjtcbiAgICAgICAgdm0ucmVtb3ZlRmlsZSA9IHJlbW92ZUZpbGU7XG5cbiAgICAgICAgaW5pdENvbnRyb2xsZXIoKTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0Q29udHJvbGxlcigpIHtcclxuICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5faWQpIHtcclxuICAgICAgICAgICAgICAgIHZtLnRpdGxlID0gJ0VkaXQgVXNlcic7XHJcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5HZXRCeUlkKCRzdGF0ZVBhcmFtcy5faWQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVlcCBjbG9uZSB1c2VyIGludG8gdm0udXNlciB0byBwcmV2ZW50IHVuc2F2ZWQgY2hhbmdlcyBzdGF5aW5nIGluIHRoZSBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmV4dGVuZCh0cnVlLCB2bS51c2VyLCB1c2VyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXG4gICAgICAgICAgICAgICAgLy8gYWxlcnQgaWYgdXNlciBpcyB1cGRhdGVkL2RlbGV0ZWQgYnkgYW5vdGhlciB1c2VyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbigndXNlcnMnLCBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2lkID0gZGF0YS5pdGVtICYmIGRhdGEuaXRlbS5faWQgfHwgZGF0YS5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pZCA9PT0gdm0udXNlci5faWQgJiYgX2lkICE9PSB2bS51cGRhdGVkSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVG9hc3RTZXJ2aWNlLkVycm9yKCdUaGlzIHVzZXIgd2FzIGp1c3QgJyArIGRhdGEuYWN0aW9uICsgJyBieSBhbm90aGVyIHVzZXInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cbiAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ2ZpbGVzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdXBsb2FkRmlsZXMoJHNjb3BlLmZpbGVzKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBhbnkgdW5zYXZlZCAvIG9ycGhhbmVkIGZpbGVzXHJcbiAgICAgICAgICAgICAgICBpZiAoIXZtLnNhdmVkICYmIHZtLnVzZXIuZmlsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdW5zYXZlZEZpbGVzID0gXy5maWx0ZXIodm0udXNlci5maWxlcywgZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuICFmaWxlLnNhdmVkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaCh1bnNhdmVkRmlsZXMsIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVTZXJ2aWNlLkRlbGV0ZShmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2F2ZVVzZXIodXNlcikge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnVzZXJGb3JtLiRpbnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdXNlci5faWQpIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZVVzZXIoKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlVXNlcigpO1xyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVVzZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5DcmVhdGUodXNlcilcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zYXZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygndXNlcnMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFRvYXN0U2VydmljZS5TdWNjZXNzKCdVc2VyIGNyZWF0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVG9hc3RTZXJ2aWNlLkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVVc2VyKCkge1xyXG4gICAgICAgICAgICAgICAgdm0udXBkYXRlZElkID0gdXNlci5faWQ7XHJcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5VcGRhdGUodXNlcilcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zYXZlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgYW55IGZpbGVzIGZsYWdnZWQgdG8gYmUgZGVsZXRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm0uZmlsZXNUb0RlbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5lYWNoKHZtLmZpbGVzVG9EZWxldGUsIGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZVNlcnZpY2UuRGVsZXRlKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZGlyZWN0IHRvIHVzZXJzIHZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCd1c2VycycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2FzdFNlcnZpY2UuU3VjY2VzcygnVXNlciB1cGRhdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUb2FzdFNlcnZpY2UuRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwbG9hZEZpbGVzKGZpbGVzKSB7XHJcbiAgICAgICAgICAgIGlmIChmaWxlcyAmJiBmaWxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZtLnVzZXIuZmlsZXMgPSB2bS51c2VyLmZpbGVzIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgdm0uZmFpbGVkVXBsb2FkcyA9IHZtLmZhaWxlZFVwbG9hZHMgfHwgW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlLnByb2dyZXNzID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGZpbGUgaWYgaXQncyBhbHJlYWR5IGluIHRoZSBsaXN0IHRvIHByZXZlbnQgb3JwaGFuZWQgZmlsZXMgb24gdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0ZpbGUgPSBfLmZpbmRXaGVyZSh2bS51c2VyLmZpbGVzLCB7IG5hbWU6IGZpbGUubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdGaWxlKSByZW1vdmVGaWxlKGV4aXN0aW5nRmlsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBmaWxlIHRvIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgdm0udXNlci5maWxlcy5wdXNoKF8uY2xvbmUoZmlsZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB1cGxvYWQgZmlsZSB0byBzZXJ2ZXJcclxuICAgICAgICAgICAgICAgICAgICBGaWxlU2VydmljZS5VcGxvYWQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkc2NvcGUuYXBpVXJsICsgJy91cGxvYWRzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnByb2dyZXNzKGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gXy5maW5kV2hlcmUodm0udXNlci5maWxlcywgeyBuYW1lOiBldnQuY29uZmlnLmZpbGUubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWxlLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnByb2dyZXNzID0gcGFyc2VJbnQoMTAwLjAgKiBldnQubG9hZGVkIC8gZXZ0LnRvdGFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF8uZmluZFdoZXJlKHZtLnVzZXIuZmlsZXMsIHsgbmFtZTogY29uZmlnLmZpbGUubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmaWxlLnByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5wYXRoID0gJy91cGxvYWRzLycgKyBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF8uZmluZFdoZXJlKHZtLnVzZXIuZmlsZXMsIHsgbmFtZTogY29uZmlnLmZpbGUubmFtZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnVzZXIuZmlsZXMgPSBfLndpdGhvdXQodm0udXNlci5maWxlcywgXy5maW5kV2hlcmUodm0udXNlci5maWxlcywgZmlsZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5lcnJvciA9IHN0YXR1cyArIFwiIFwiICsgZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmZhaWxlZFVwbG9hZHMucHVzaChmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRmlsZShmaWxlKSB7XHJcbiAgICAgICAgICAgIHZtLnVzZXIuZmlsZXMgPSBfLndpdGhvdXQodm0udXNlci5maWxlcywgXy5maW5kV2hlcmUodm0udXNlci5maWxlcywgeyBuYW1lOiBmaWxlLm5hbWUgfSkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmaWxlLnNhdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmaWxlIG5vdCBsaW5rZWQgdG8gdXNlciBzbyBkZWxldGUgbm93XHJcbiAgICAgICAgICAgICAgICBGaWxlU2VydmljZS5EZWxldGUoZmlsZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmaWxlIGxpbmtlZCB0byB1c2VyIHNvIGZsYWcgdG8gYmUgZGVsZXRlZCBvbiBzYXZlXHJcbiAgICAgICAgICAgICAgICB2bS5maWxlc1RvRGVsZXRlID0gdm0uZmlsZXNUb0RlbGV0ZSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIHZtLmZpbGVzVG9EZWxldGUucHVzaChmaWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cbiAgICBDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkc3RhdGVcIiwgXCIkc3RhdGVQYXJhbXNcIiwgXCIkdGltZW91dFwiLCBcIlVzZXJTZXJ2aWNlXCIsIFwiVG9hc3RTZXJ2aWNlXCIsIFwiRmlsZVNlcnZpY2VcIl07XHJcblxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1VzZXJzLkluZGV4Q29udHJvbGxlcicsIENvbnRyb2xsZXIpO1xuXG4gICAgZnVuY3Rpb24gQ29udHJvbGxlcigkc2NvcGUsIFVzZXJTZXJ2aWNlLCAkdGltZW91dCwgJG1kRGlhbG9nKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdm0udXNlcnMgPSBbXTtcbiAgICAgICAgdm0uZGVsZXRlVXNlciA9IGRlbGV0ZVVzZXI7XG5cbiAgICAgICAgaW5pdENvbnRyb2xsZXIoKTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0Q29udHJvbGxlcigpIHtcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIGZsZXhncmlkIHRvIGluaXRpYWxpc2UgYmVmb3JlIGxvYWRpbmcgdXNlcnNcbiAgICAgICAgICAgIHZhciB3YXRjaCA9ICRzY29wZS4kd2F0Y2goJ3ZtLmZsZXhncmlkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZtLmZsZXhncmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZFVzZXJzKCk7XHJcblxuICAgICAgICAgICAgICAgICAgICAvLyByZWxvYWQgdXNlcnMgb24gJ3VzZXJzJyBldmVudFxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCd1c2VycycsIGZ1bmN0aW9uICgpIHsgbG9hZFVzZXJzKCk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB1bmJpbmQgd2F0Y2hcclxuICAgICAgICAgICAgICAgICAgICB3YXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRVc2VycygpIHtcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLkdldEFsbCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS51c2VycyA9IHVzZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmZsZXhncmlkLmNvbGxlY3Rpb25WaWV3LnJlZnJlc2goKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWxldGVVc2VyKF9pZCkge1xuICAgICAgICAgICAgVXNlclNlcnZpY2UuRGVsZXRlKF9pZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRVc2VycygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIENvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIlVzZXJTZXJ2aWNlXCIsIFwiJHRpbWVvdXRcIiwgXCIkbWREaWFsb2dcIl07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuZmFjdG9yeSgnQ2FjaGUnLCBTZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBTZXJ2aWNlKCRjYWNoZUZhY3RvcnkpIHtcclxuICAgICAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgnY2FjaGUnKTtcclxuICAgIH1cclxuICAgIFNlcnZpY2UuJGluamVjdCA9IFtcIiRjYWNoZUZhY3RvcnlcIl07XHJcblxyXG59KSgpO1xyXG4iLCIvKlxyXG4gICAgR2VuZXJpYyBkYXRhIHNlcnZpY2UgZm9yIGFjY2Vzc2luZyBhcGkgYW5kIGNhY2hpbmcgcmVzdWx0c1xyXG4qL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdEYXRhU2VydmljZScsIFNlcnZpY2UpO1xyXG5cclxuICAgIGZ1bmN0aW9uIFNlcnZpY2UoJHJvb3RTY29wZSwgJGh0dHAsICRxLCBDYWNoZSwgU29ja2V0KSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7fTtcclxuXHJcbiAgICAgICAgc2VydmljZS5HZXRBbGwgPSBHZXRBbGw7XHJcbiAgICAgICAgc2VydmljZS5HZXRCeUlkID0gR2V0QnlJZDtcclxuICAgICAgICBzZXJ2aWNlLkNyZWF0ZSA9IENyZWF0ZTtcclxuICAgICAgICBzZXJ2aWNlLlVwZGF0ZSA9IFVwZGF0ZTtcclxuICAgICAgICBzZXJ2aWNlLkRlbGV0ZSA9IERlbGV0ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEdldEFsbCh0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghQ2FjaGUuZ2V0KHR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGRhdGEgZnJvbSBhcGlcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJHJvb3RTY29wZS5hcGlVcmwgKyAnLycgKyB0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWNoZSBkYXRhIHRoZW4gcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWNoZS5wdXQodHlwZSwgcmVzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXMuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGRhdGEgZnJvbSBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoQ2FjaGUuZ2V0KHR5cGUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzdWJzY3JpYmUgdG8gYW55IGNoYW5nZXMgdG8gdGhpcyB0eXBlXHJcbiAgICAgICAgICAgICAgICBTb2NrZXQuT24odHlwZSwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBHZXRBbGwodHlwZSkoKS50aGVuKGZ1bmN0aW9uIChpdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGEuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjcmVhdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXRlbSB0byBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goZGF0YS5pdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWNoZS5wdXQodHlwZSwgaXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGl0ZW0gaW4gY2FjaGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBfLmZpbmRJbmRleChpdGVtcywgeyBfaWQ6IGRhdGEuaXRlbS5faWQgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpbmRleF0gPSBkYXRhLml0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FjaGUucHV0KHR5cGUsIGl0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBpdGVtIGZyb20gY2FjaGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IF8ud2l0aG91dChpdGVtcywgXy5maW5kV2hlcmUoaXRlbXMsIHsgX2lkOiBkYXRhLl9pZCB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FjaGUucHV0KHR5cGUsIGl0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBicm9hZGNhc3QgZXZlbnQgdG8gY29udHJvbGxlcnMgdG8gdXBkYXRlIHZpZXdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCh0eXBlLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBHZXRCeUlkKHR5cGUpIHsgXHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX2lkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gR2V0QWxsKHR5cGUpKCkudGhlbihmdW5jdGlvbiAoaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kV2hlcmUoaXRlbXMsIHsgX2lkOiBfaWQgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlKHR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJHJvb3RTY29wZS5hcGlVcmwgKyAnLycgKyB0eXBlLCBpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHsgZGVmZXJyZWQucmVzb2x2ZSgpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAocmVzKSB7IGRlZmVycmVkLnJlamVjdChyZXMuZGF0YSk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBVcGRhdGUodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KCRyb290U2NvcGUuYXBpVXJsICsgJy8nICsgdHlwZSArICcvJyArIGl0ZW0uX2lkLCBpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHsgZGVmZXJyZWQucmVzb2x2ZSgpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAocmVzKSB7IGRlZmVycmVkLnJlamVjdChyZXMuZGF0YSk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBEZWxldGUodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF9pZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUoJHJvb3RTY29wZS5hcGlVcmwgKyAnLycgKyB0eXBlICsgJy8nICsgX2lkKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHsgZGVmZXJyZWQucmVzb2x2ZSgpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAocmVzKSB7IGRlZmVycmVkLnJlamVjdChyZXMuZGF0YSk7IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgU2VydmljZS4kaW5qZWN0ID0gW1wiJHJvb3RTY29wZVwiLCBcIiRodHRwXCIsIFwiJHFcIiwgXCJDYWNoZVwiLCBcIlNvY2tldFwiXTtcclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmZhY3RvcnkoJ0ZpbGVTZXJ2aWNlJywgU2VydmljZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gU2VydmljZSgkcm9vdFNjb3BlLCAkaHR0cCwgVXBsb2FkKSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7fTtcclxuXHJcbiAgICAgICAgc2VydmljZS5VcGxvYWQgPSBVcGxvYWQudXBsb2FkO1xyXG4gICAgICAgIHNlcnZpY2UuRGVsZXRlID0gZGVsZXRlRmlsZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUZpbGUoZmlsZSkge1xyXG4gICAgICAgICAgICAkaHR0cC5kZWxldGUoJHJvb3RTY29wZS5hcGlVcmwgKyBmaWxlLnBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFNlcnZpY2UuJGluamVjdCA9IFtcIiRyb290U2NvcGVcIiwgXCIkaHR0cFwiLCBcIlVwbG9hZFwiXTtcclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmZhY3RvcnkoJ1NvY2tldCcsIFNlcnZpY2UpO1xyXG5cclxuICAgIGZ1bmN0aW9uIFNlcnZpY2UoJHJvb3RTY29wZSkge1xyXG4gICAgICAgIHZhciBzb2NrZXQgPSBpby5jb25uZWN0KCRyb290U2NvcGUuYXBpVXJsKTtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHt9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNlcnZpY2UuT24gPSBPbjtcclxuICAgICAgICBzZXJ2aWNlLkVtaXQgPSBFbWl0O1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLnNvY2tldExpc3RlbmVycyA9IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gT24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAoIV8uY29udGFpbnMoJHJvb3RTY29wZS5zb2NrZXRMaXN0ZW5lcnMsIGV2ZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc29ja2V0TGlzdGVuZXJzLnB1c2goZXZlbnROYW1lKTtcclxuICAgICAgICAgICAgICAgIHNvY2tldC5vbihldmVudE5hbWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHNvY2tldCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRW1pdChldmVudE5hbWUsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KGV2ZW50TmFtZSwgZGF0YSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHNvY2tldCwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFNlcnZpY2UuJGluamVjdCA9IFtcIiRyb290U2NvcGVcIl07XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdUb2FzdFNlcnZpY2UnLCBTZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBTZXJ2aWNlKCRtZFRvYXN0KSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7fTtcclxuXHJcbiAgICAgICAgc2VydmljZS5TdWNjZXNzID0gRmxhc2goJ3N1Y2Nlc3MnKTtcclxuICAgICAgICBzZXJ2aWNlLkVycm9yID0gRmxhc2goJ2Vycm9yJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBGbGFzaCh0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogQ29udHJvbGxlcixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd0b2FzdC0nICsgdHlwZSArICctdGVtcGxhdGUuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZURlbGF5OiA2MDAwLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQ29udHJvbGxlcigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2bS5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5jbG9zZSA9ICRtZFRvYXN0LmhpZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTZXJ2aWNlLiRpbmplY3QgPSBbXCIkbWRUb2FzdFwiXTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuZmFjdG9yeSgnVXNlclNlcnZpY2UnLCBTZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBTZXJ2aWNlKERhdGFTZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSAndXNlcnMnO1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge307XHJcblxyXG4gICAgICAgIHNlcnZpY2UuR2V0QWxsID0gRGF0YVNlcnZpY2UuR2V0QWxsKHR5cGUpO1xyXG4gICAgICAgIHNlcnZpY2UuR2V0QnlJZCA9IERhdGFTZXJ2aWNlLkdldEJ5SWQodHlwZSk7XHJcbiAgICAgICAgc2VydmljZS5DcmVhdGUgPSBEYXRhU2VydmljZS5DcmVhdGUodHlwZSk7XHJcbiAgICAgICAgc2VydmljZS5VcGRhdGUgPSBEYXRhU2VydmljZS5VcGRhdGUodHlwZSk7XHJcbiAgICAgICAgc2VydmljZS5EZWxldGUgPSBEYXRhU2VydmljZS5EZWxldGUodHlwZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG4gICAgfVxyXG4gICAgU2VydmljZS4kaW5qZWN0ID0gW1wiRGF0YVNlcnZpY2VcIl07XHJcblxyXG59KSgpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=