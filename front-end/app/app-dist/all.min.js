!function(){"use strict";function e(e,t,r,o,l){e.html5Mode(!0),r.otherwise("/"),o.strictMode(!1),t.state("overview",{url:"/",templateUrl:"overview/main.html",controller:"Overview.MainController",controllerAs:"vm",data:{selectedTab:0}}).state("users",{url:"/users",templateUrl:"users/main.html",controller:"Users.MainController",controllerAs:"vm",data:{selectedTab:1}}).state("users.add",{url:"/add",templateUrl:"users/add-edit.html",controller:"Users.AddEditController",controllerAs:"vm"}).state("users.edit",{url:"/edit/:_id",templateUrl:"users/add-edit.html",controller:"Users.AddEditController",controllerAs:"vm"})}function t(e,t){e.apiUrl="http://localhost:3001",t.get("/token").then(function(e){t.defaults.headers.common.Authorization="Bearer "+e.data})}angular.module("app",["ngMaterial","ngAnimate","ngMessages","ui.router","ngFileUpload","wj"]).config(e).run(t),e.$inject=["$locationProvider","$stateProvider","$urlRouterProvider","$urlMatcherFactoryProvider","$mdThemingProvider"],t.$inject=["$rootScope","$http"]}();
!function(){"use strict";function c(c){return c("cache")}angular.module("app").factory("Cache",c),c.$inject=["$cacheFactory"]}();
!function(){"use strict";function t(t,e,n,r,c){function i(u){return function(){var a=n.defer();return r.get(u)?a.resolve(r.get(u)):e.get(t.apiUrl+"/"+u).then(function(t){r.put(u,t.data),a.resolve(t.data)})["catch"](function(t){a.reject(t.data)}),c.On(u,function(e){i(u)().then(function(n){switch(e.action){case"created":n.push(e.item),r.put(u,n);break;case"updated":var c=_.findIndex(n,{_id:e.item._id});n[c]=e.item,r.put(u,n);break;case"deleted":n=_.without(n,_.findWhere(n,{_id:e._id})),r.put(u,n)}t.$broadcast(u,e)})}),a.promise}}function u(t){return function(e){return i(t)().then(function(t){return _.findWhere(t,{_id:e})})}}function a(r){return function(c){var i=n.defer();return e.post(t.apiUrl+"/"+r,c).then(function(t){i.resolve()})["catch"](function(t){i.reject(t.data)}),i.promise}}function o(r){return function(c){var i=n.defer();return e.put(t.apiUrl+"/"+r+"/"+c._id,c).then(function(t){i.resolve()})["catch"](function(t){i.reject(t.data)}),i.promise}}function f(r){return function(c){var i=n.defer();return e["delete"](t.apiUrl+"/"+r+"/"+c).then(function(t){i.resolve()})["catch"](function(t){i.reject(t.data)}),i.promise}}var d={};return d.GetAll=i,d.GetById=u,d.Create=a,d.Update=o,d.Delete=f,d}angular.module("app").factory("DataService",t),t.$inject=["$rootScope","$http","$q","Cache","Socket"]}();
!function(){"use strict";function e(e,t,o){function a(o){t["delete"](e.apiUrl+o.path)}var l={};return l.Upload=o.upload,l.Delete=a,l}angular.module("app").factory("FileService",e),e.$inject=["$rootScope","$http","Upload"]}();
!function(){"use strict";function n(n){function t(t,o){_.contains(n.socketListeners,t)||(n.socketListeners.push(t),c.on(t,function(){var t=arguments;n.$apply(function(){o.apply(c,t)})}))}function o(t,o,e){c.emit(t,o,function(){var t=arguments;n.$apply(function(){e&&e.apply(c,t)})})}var c=io.connect(n.apiUrl),e={};return e.On=t,e.Emit=o,n.socketListeners=[],e}angular.module("app").factory("Socket",n),n.$inject=["$rootScope"]}();
!function(){"use strict";function e(e){function t(t){return function(r){function o(){var t=this;t.message=r,t.close=e.hide}e.show({controller:o,controllerAs:"vm",templateUrl:"toast-"+t+"-template.html",hideDelay:6e3})}}var r={};return r.Success=t("success"),r.Error=t("error"),r}angular.module("app").factory("ToastService",e),e.$inject=["$mdToast"]}();
!function(){"use strict";function e(e){var t="users",r={};return r.GetAll=e.GetAll(t),r.GetById=e.GetById(t),r.Create=e.Create(t),r.Update=e.Update(t),r.Delete=e.Delete(t),r}angular.module("app").factory("UserService",e),e.$inject=["DataService"]}();
!function(){"use strict";function e(e){var t=this;t.selectedTab=0,t.tabs=[{name:"Overview",path:"/"},{name:"Users",path:"/users"}],e.$on("$stateChangeSuccess",function(e,a,s,n,c){t.selectedTab=a.data.selectedTab})}angular.module("app").controller("TabsController",e),e.$inject=["$rootScope"]}();
!function(){"use strict";function n(){}angular.module("app").controller("Overview.MainController",n)}();
!function(){"use strict";function e(e,s,r,i,t,n,o){function u(){r._id&&(d.title="Edit User",t.GetById(r._id).then(function(e){$.extend(!0,d.user,e)}),e.$on("users",function(e,s){var r=s.item&&s.item._id||s._id;r===d.user._id&&r!==d.updatedId&&n.Error("This user was just "+s.action+" by another user")})),e.$watch("files",function(){a(e.files)}),e.$on("$destroy",function(){if(!d.saved&&d.user.files){var e=_.filter(d.user.files,function(e){return!e.saved});_.each(e,function(e){o.Delete(e)})}})}function l(r){function i(){t.Create(r).then(function(){d.saved=!0,s.go("users"),n.Success("User created")})["catch"](function(e){n.Error(e)})}function u(){d.updatedId=r._id,t.Update(r).then(function(){d.saved=!0,d.filesToDelete&&_.each(d.filesToDelete,function(e){o.Delete(e)}),s.go("users"),n.Success("User updated")})["catch"](function(e){n.Error(e)})}e.userForm.$invalid||(r._id?u():i())}function a(s){if(s&&s.length){d.user.files=d.user.files||[],d.failedUploads=d.failedUploads||[];for(var r=0;r<s.length;r++){var i=s[r];i.progress=0;var t=_.findWhere(d.user.files,{name:i.name});t&&f(t),d.user.files.push(_.clone(i)),o.Upload({url:e.apiUrl+"/uploads",file:i}).progress(function(e){var s=_.findWhere(d.user.files,{name:e.config.file.name});delete s.path,s.progress=parseInt(100*e.loaded/e.total)}).success(function(e,s,r,i){var t=_.findWhere(d.user.files,{name:i.file.name});delete t.progress,t.path="/uploads/"+e}).error(function(e,s,r,i){var t=_.findWhere(d.user.files,{name:i.file.name});d.user.files=_.without(d.user.files,_.findWhere(d.user.files,t)),t.error=s+" "+e,d.failedUploads.push(t)})}}}function f(e){d.user.files=_.without(d.user.files,_.findWhere(d.user.files,{name:e.name})),e.saved?(d.filesToDelete=d.filesToDelete||[],d.filesToDelete.push(e)):o.Delete(e)}var d=this;d.title="Add User",d.user={},d.saveUser=l,d.removeFile=f,u()}angular.module("app").controller("Users.AddEditController",e),e.$inject=["$scope","$state","$stateParams","$timeout","UserService","ToastService","FileService"]}();
!function(){"use strict";function e(e,n,t,i){function o(){var n=e.$watch("vm.flexgrid",function(){l.flexgrid&&(r(),e.$on("users",function(){r()}),n())})}function r(){n.GetAll().then(function(e){l.users=e,l.flexgrid.collectionView.refresh()})}function c(e){n.Delete(e).then(function(){r()})}var l=this;l.users=[],l.deleteUser=c,o()}angular.module("app").controller("Users.MainController",e),e.$inject=["$scope","UserService","$timeout","$mdDialog"]}();
//# sourceMappingURL=data:application/json;base64,