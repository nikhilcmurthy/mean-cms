!function(){"use strict";function e(e,t,r,l,o){e.html5Mode(!0),r.otherwise("/"),l.strictMode(!1),t.state("overview",{url:"/",templateUrl:"overview/main.html",controller:"Overview.MainController",controllerAs:"vm",data:{selectedTab:0}}).state("users",{url:"/users",templateUrl:"users/main.html",controller:"Users.MainController",controllerAs:"vm",data:{selectedTab:1}}).state("users.add",{url:"/add",templateUrl:"users/add-edit.html",controller:"Users.AddEditController",controllerAs:"vm"}).state("users.edit",{url:"/edit/:_id",templateUrl:"users/add-edit.html",controller:"Users.AddEditController",controllerAs:"vm"}).state("generic",{url:"/:dataType",templateUrl:function(e){return e.dataType+"/main.html"},controller:"Generic.MainController",controllerAs:"vm"}).state("generic.add",{url:"/add",templateUrl:function(e){return e.dataType+"/add-edit.html"},controller:"Generic.AddEditController",controllerAs:"vm"}).state("generic.edit",{url:"/edit/:_id",templateUrl:function(e){return e.dataType+"/add-edit.html"},controller:"Generic.AddEditController",controllerAs:"vm"})}function t(e,t){e.apiUrl="http://localhost:3001",t.get("/token").then(function(e){t.defaults.headers.common.Authorization="Bearer "+e.data})}e.$inject=["$locationProvider","$stateProvider","$urlRouterProvider","$urlMatcherFactoryProvider","$mdThemingProvider"],t.$inject=["$rootScope","$http"],angular.module("app",["ngMaterial","md.data.table","ngAnimate","ngMessages","ui.router","ngFileUpload","wj"]).config(e).run(t)}();
!function(){"use strict";function c(c){return c("cache")}c.$inject=["$cacheFactory"],angular.module("app").factory("Cache",c)}();
!function(){"use strict";function t(t,e,n,r,i){function c(o){return function(){var u=n.defer();return r.get(o)?u.resolve(r.get(o)):e.get(t.apiUrl+"/"+o).then(function(t){r.put(o,t.data),u.resolve(t.data)})["catch"](function(t){u.reject(t.data)}),i.On(o,function(e){c(o)().then(function(n){switch(e.action){case"created":n.push(e.item),r.put(o,n);break;case"updated":var i=_.findIndex(n,{_id:e.item._id});n[i]=e.item,r.put(o,n);break;case"deleted":n=_.without(n,_.findWhere(n,{_id:e._id})),r.put(o,n)}t.$broadcast(o,e)})}),u.promise}}function o(t){return function(e){return c(t)().then(function(t){return _.findWhere(t,{_id:e})})}}function u(r){return function(i){var c=n.defer();return console.log("posting",t.apiUrl+"/"+r),console.log("item",i),e.post(t.apiUrl+"/"+r,i).then(function(t){c.resolve()})["catch"](function(t){c.reject(t.data)}),c.promise}}function a(r){return function(i){var c=n.defer();return e.put(t.apiUrl+"/"+r+"/"+i._id,i).then(function(t){c.resolve()})["catch"](function(t){c.reject(t.data)}),c.promise}}function f(r){return function(i){var c=n.defer();return e["delete"](t.apiUrl+"/"+r+"/"+i).then(function(t){c.resolve()})["catch"](function(t){c.reject(t.data)}),c.promise}}return function(t){var e={};return e.GetAll=c(t),e.GetById=o(t),e.Create=u(t),e.Update=a(t),e.Delete=f(t),e}}t.$inject=["$rootScope","$http","$q","Cache","Socket"],angular.module("app").factory("DataService",t)}();
!function(){"use strict";function e(e,t,o){function a(o){t["delete"](e.apiUrl+o.path)}var l={};return l.Upload=o.upload,l.Delete=a,l}e.$inject=["$rootScope","$http","Upload"],angular.module("app").factory("FileService",e)}();
!function(){"use strict";function t(t,e,n,i,a){function c(){n._id&&(u.GetById(n._id).then(function(t){$.extend(!0,o.item,t)}),t.$on(r,function(t,e){var n=e.item&&e.item._id||e._id;n===o.item._id&&n!==o.updatedId&&a.Error("This item was just "+e.action+" by another user")}))}function d(n){function i(){u.Create(n).then(function(){o.saved=!0,e.go("generic",{dataType:r}),a.Success("Item created")})["catch"](function(t){a.Error(t)})}function c(){o.updatedId=n._id,u.Update(n).then(function(){o.saved=!0,e.go("generic",{dataType:r}),a.Success("Item updated")})["catch"](function(t){a.Error(t)})}t.form.$invalid||(n._id?c():i())}var o=this,r=n.dataType,u=i(r);o.item={},o.saveItem=d,c()}t.$inject=["$scope","$state","$stateParams","DataService","ToastService"],angular.module("app").controller("Generic.AddEditController",t)}();
!function(){"use strict";function t(t,e,n,a){function o(){c(),t.$on(r,c)}function c(){u.GetAll().then(function(t){l[r]=t})}function i(t){u.Delete(t)}var l=this,r=n.dataType,u=a(r);l.dataType=r,l[r]=[],l.deleteItem=i,o()}t.$inject=["$scope","$state","$stateParams","DataService"],angular.module("app").controller("Generic.MainController",t)}();
!function(){"use strict";function n(n){function t(t,o){_.contains(n.socketListeners,t)||(n.socketListeners.push(t),c.on(t,function(){var t=arguments;n.$apply(function(){o.apply(c,t)})}))}function o(t,o,e){c.emit(t,o,function(){var t=arguments;n.$apply(function(){e&&e.apply(c,t)})})}var c=io.connect(n.apiUrl),e={};return e.On=t,e.Emit=o,n.socketListeners=[],e}n.$inject=["$rootScope"],angular.module("app").factory("Socket",n)}();
!function(){"use strict";function e(e){function t(t){return function(r){function o(){var t=this;t.message=r,t.close=e.hide}e.show({controller:o,controllerAs:"vm",templateUrl:"toast-"+t+"-template.html",hideDelay:6e3})}}var r={};return r.Success=t("success"),r.Error=t("error"),r}e.$inject=["$mdToast"],angular.module("app").factory("ToastService",e)}();
!function(){"use strict";function e(e){var a=this;a.selectedTab=0,a.tabs=[{name:"Overview",path:"/"},{name:"Users",path:"/users"},{name:"Services",path:"/services"},{name:"Staff",path:"/staff"},{name:"News",path:"/news"},{name:"Events",path:"/events"}],e.$on("$stateChangeSuccess",function(e,t,s,n,c){t.data&&t.data.selectedTab?a.selectedTab=t.data.selectedTab:s.dataType&&_.find(a.tabs,function(e,t){s.dataType===e.name.toLowerCase()&&(a.selectedTab=t)})})}e.$inject=["$rootScope"],angular.module("app").controller("TabsController",e)}();
!function(){"use strict";function n(){}angular.module("app").controller("Overview.MainController",n)}();
!function(){"use strict";function e(e,s,r,i,t,n){function u(){r._id&&(f.title="Edit User",d.GetById(r._id).then(function(e){$.extend(!0,f.user,e)}),e.$on("users",function(e,s){var r=s.item&&s.item._id||s._id;r===f.user._id&&r!==f.updatedId&&t.Error("This user was just "+s.action+" by another user")})),e.$watch("files",function(){o(e.files)}),e.$on("$destroy",function(){if(!f.saved&&f.user.files){var e=_.filter(f.user.files,function(e){return!e.saved});_.each(e,function(e){n.Delete(e)})}})}function a(r){function i(){d.Create(r).then(function(){f.saved=!0,s.go("users"),t.Success("User created")})["catch"](function(e){t.Error(e)})}function u(){f.updatedId=r._id,d.Update(r).then(function(){f.saved=!0,f.filesToDelete&&_.each(f.filesToDelete,function(e){n.Delete(e)}),s.go("users"),t.Success("User updated")})["catch"](function(e){t.Error(e)})}e.userForm.$invalid||(r._id?u():i())}function o(s){if(s&&s.length){f.user.files=f.user.files||[],f.failedUploads=f.failedUploads||[];for(var r=0;r<s.length;r++){var i=s[r];i.progress=0;var t=_.findWhere(f.user.files,{name:i.name});t&&l(t),f.user.files.push(_.clone(i)),n.Upload({url:e.apiUrl+"/uploads",file:i}).progress(function(e){var s=_.findWhere(f.user.files,{name:e.config.file.name});s.path||(s.progress=parseInt(100*e.loaded/e.total))}).success(function(e,s,r,i){var t=_.findWhere(f.user.files,{name:i.file.name});delete t.progress,t.path="/uploads/"+e}).error(function(e,s,r,i){var t=_.findWhere(f.user.files,{name:i.file.name});f.user.files=_.without(f.user.files,_.findWhere(f.user.files,t)),t.error=s+" "+e,f.failedUploads.push(t)})}}}function l(e){f.user.files=_.without(f.user.files,_.findWhere(f.user.files,{name:e.name})),e.saved?(f.filesToDelete=f.filesToDelete||[],f.filesToDelete.push(e)):n.Delete(e)}var f=this,d=i("users");f.title="Add User",f.user={},f.saveUser=a,f.removeFile=l,u()}e.$inject=["$scope","$state","$stateParams","DataService","ToastService","FileService"],angular.module("app").controller("Users.AddEditController",e)}();
!function(){"use strict";function e(e,n){function t(){s(),e.$on("users",s)}function s(){u.GetAll().then(function(e){o.users=e})}function r(e){u.Delete(e)}var o=this,u=n("users");o.users=[],o.deleteUser=r,t()}e.$inject=["$scope","DataService"],angular.module("app").controller("Users.MainController",e)}();
//# sourceMappingURL=data:application/json;base64,
